/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.checkers;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.checkers.AbstractTailRecursionTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box/functions/tailRecursion")
public class TailRecursionDetectorTestGenerated extends AbstractTailRecursionTest {
    public void testAllFilesPresentInTailRecursion() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/box/functions/tailRecursion"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("defaultArgs.kt")
    public void testDefaultArgs() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/defaultArgs.kt");
    }
    
    @TestMetadata("infixCall.kt")
    public void testInfixCall() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/infixCall.kt");
    }
    
    @TestMetadata("insideElvis.kt")
    public void testInsideElvis() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/insideElvis.kt");
    }
    
    @TestMetadata("labeledThisReferences.kt")
    public void testLabeledThisReferences() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/labeledThisReferences.kt");
    }
    
    @TestMetadata("loops.kt")
    public void testLoops() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/loops.kt");
    }
    
    @TestMetadata("multilevelBlocks.kt")
    public void testMultilevelBlocks() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/multilevelBlocks.kt");
    }
    
    @TestMetadata("realIteratorFoldl.kt")
    public void testRealIteratorFoldl() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/realIteratorFoldl.kt");
    }
    
    @TestMetadata("realStringEscape.kt")
    public void testRealStringEscape() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/realStringEscape.kt");
    }
    
    @TestMetadata("realStringRepeat.kt")
    public void testRealStringRepeat() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/realStringRepeat.kt");
    }
    
    @TestMetadata("recursiveInnerFunction.kt")
    public void testRecursiveInnerFunction() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/recursiveInnerFunction.kt");
    }
    
    @TestMetadata("returnIf.kt")
    public void testReturnIf() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/returnIf.kt");
    }
    
    @TestMetadata("returnInCatch.kt")
    public void testReturnInCatch() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInCatch.kt");
    }
    
    @TestMetadata("returnInFinally.kt")
    public void testReturnInFinally() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInFinally.kt");
    }
    
    @TestMetadata("returnInIfInFinally.kt")
    public void testReturnInIfInFinally() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInIfInFinally.kt");
    }
    
    @TestMetadata("returnInTry.kt")
    public void testReturnInTry() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/returnInTry.kt");
    }
    
    @TestMetadata("simpleBlock.kt")
    public void testSimpleBlock() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/simpleBlock.kt");
    }
    
    @TestMetadata("simpleReturn.kt")
    public void testSimpleReturn() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/simpleReturn.kt");
    }
    
    @TestMetadata("simpleReturnWithElse.kt")
    public void testSimpleReturnWithElse() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/simpleReturnWithElse.kt");
    }
    
    @TestMetadata("thisReferences.kt")
    public void testThisReferences() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/thisReferences.kt");
    }
    
    @TestMetadata("unitBlocks.kt")
    public void testUnitBlocks() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/unitBlocks.kt");
    }
    
    @TestMetadata("whenWithCondition.kt")
    public void testWhenWithCondition() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithCondition.kt");
    }
    
    @TestMetadata("whenWithInRange.kt")
    public void testWhenWithInRange() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithInRange.kt");
    }
    
    @TestMetadata("whenWithIs.kt")
    public void testWhenWithIs() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithIs.kt");
    }
    
    @TestMetadata("whenWithoutCondition.kt")
    public void testWhenWithoutCondition() throws Exception {
        doTest("compiler/testData/codegen/box/functions/tailRecursion/whenWithoutCondition.kt");
    }
    
}
