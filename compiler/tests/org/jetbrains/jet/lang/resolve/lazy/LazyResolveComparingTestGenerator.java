/*
 * Copyright 2010-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.lang.resolve.lazy;

import com.intellij.openapi.util.io.FileUtil;
import com.intellij.openapi.util.text.StringUtil;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;

/**
 * @author abreslav
 */
public class LazyResolveComparingTestGenerator {
    public static void main(String[] args) throws IOException {
        new LazyResolveComparingTestGenerator().generateAndSave();
    }

    private final String baseDir;
    private final String testDataFileExtension;
    private final String testClassPackage;
    private final String testClassName;
    private final String baseTestClassPackage;
    private final String baseTestClassName;
    private final File testDataDir;
    private final String generatorName;

    public LazyResolveComparingTestGenerator() {
        baseDir = "compiler/tests/";
        testDataFileExtension = "kt";
        testClassPackage = "org.jetbrains.jet.lang.resolve.lazy";
        testClassName = "LazyResolveComparingTestGenerated";
        baseTestClassPackage = "org.jetbrains.jet.lang.resolve.lazy";
        baseTestClassName = "AbstractLazyResolveComparingTest";
        testDataDir = new File("compiler/testData/lazyResolve");
        generatorName = "LazyResolveComparingTestGenerator";
    }

    public void generateAndSave() throws IOException {
        StringBuilder out = new StringBuilder();
        Printer p = new Printer(out);

        p.print(FileUtil.loadFile(new File("injector-generator/copyright.txt")));
        p.println("package ", testClassPackage, ";");
        p.println();
        p.println("import org.junit.Assert;");
        p.println("import org.junit.Test;");
        p.println();

        p.println("import java.io.File;");
        p.println("import java.io.FileFilter;");
        p.println("import java.lang.reflect.Method;");
        p.println("import java.util.HashSet;");
        p.println("import java.util.Set;");
        p.println();

        p.println("import ", baseTestClassPackage, ".", baseTestClassName, ";");
        p.println();

        p.println("/* This class is generated by " + generatorName + ". DO NOT MODIFY MANUALLY */");
        p.println("public class ", testClassName, " extends ", baseTestClassName, " {");
        p.pushIndent();

        File[] ktFiles = testDataDir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.getName().endsWith("." + testDataFileExtension);
            }
        });
        for (File file : ktFiles) {
            p.println("@Test");
            p.println("public void test", FileUtil.getNameWithoutExtension(StringUtil.capitalize(file.getName())), "() throws Exception {");
            p.pushIndent();

            p.println("doTest(\"", file.getPath(), "\");");

            p.popIndent();
            p.println("}");
            p.println();
        }

        generateAllTestsPresent(p);

        p.popIndent();
        p.println("}");

        String testSourceFilePath = baseDir + testClassPackage.replace(".", "/") + "/" + testClassName + ".java";
        FileUtil.writeToFile(new File(testSourceFilePath), out.toString());
    }

    private void generateAllTestsPresent(Printer p) {
        String methodText =
                     "@Test\n" +
                     "    public void allTestsPresent() {\n" +
                     "        Set<String> methodNames = new HashSet<String>();\n" +
                     "        for (Method method : " + testClassName + ".class.getDeclaredMethods()) {\n" +
                     "            if (method.isAnnotationPresent(Test.class)) {\n" +
                     "                methodNames.add(method.getName().toLowerCase() + \"." + testDataFileExtension + "\");\n" +
                     "            }\n" +
                     "        }\n" +
                     "        File[] testDataFiles = new File(\"" + testDataDir + "\").listFiles(new FileFilter() {\n" +
                     "            @Override\n" +
                     "            public boolean accept(File pathname) {\n" +
                     "                return pathname.getName().endsWith(\"." + testDataFileExtension + "\");\n" +
                     "            }\n" +
                     "        });\n" +
                     "        for (File testDataFile : testDataFiles) {\n" +
                     "            if (!methodNames.contains(\"test\" + testDataFile.getName().toLowerCase())) {\n" +
                     "                Assert.fail(\"Test data file missing from the generated test class: \" + testDataFile + \"\\nPlease re-run the generator: " + testClassName + "\");\n" +
                     "            }\n" +
                     "        }\n" +
                     "    }\n";

        p.println(methodText);
    }

    private static class Printer {
        private static final String INDENTATION_UNIT = "    ";
        private String indent = "";
        private final StringBuilder out;

        private Printer(@NotNull StringBuilder out) {
            this.out = out;
        }

        public void println(Object... objects) {
            print(objects);
            out.append("\n");
        }

        public void print(Object... objects) {
            out.append(indent);
            for (Object object : objects) {
                out.append(object);
            }
        }

        public void pushIndent() {
            indent += INDENTATION_UNIT;
        }

        public void popIndent() {
            if (indent.length() < INDENTATION_UNIT.length()) {
                throw new IllegalStateException("No indentation to pop");
            }

            indent = indent.substring(INDENTATION_UNIT.length());
        }
    }
}
