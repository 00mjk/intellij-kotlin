LazyAnnotationDescriptor@0 {
    resolutionResults = OverloadResolutionResultsImpl@1
    type = JetTypeImpl@2['tailRecursive']
}

LazyJavaClassDescriptor@3['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@4['Exception']
}

LazyJavaClassDescriptor@5['IllegalStateException'] {
    constructors = ArrayList@6[4] { JavaConstructorDescriptor@7['<init>'], JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], ... } // through LazyJavaClassMemberScope@10
    defaultType = JetTypeImpl@11['IllegalStateException']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@12['IllegalStateException']
}

LazyJavaClassDescriptor@13['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@14['RuntimeException']
}

LazyJavaClassTypeConstructor@4['Exception'] {
    parameters = ArrayList@15[empty]
    supertypes = ArrayList@16[1] { LazyJavaClassifierType@17['Throwable'] }
}

LazyJavaClassTypeConstructor@12['IllegalStateException'] {
    parameters = ArrayList@18[empty]
    supertypes = ArrayList@19[1] { LazyJavaClassifierType@20['RuntimeException'] }
}

LazyJavaClassTypeConstructor@14['RuntimeException'] {
    parameters = ArrayList@21[empty]
    supertypes = ArrayList@22[1] { LazyJavaClassifierType@23['Exception'] }
}

LazyJavaClassifierType@23['Exception'] {
    arguments = ArrayList@24[empty]
    classifier = JavaClassImpl@25['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@4['Exception']
}

LazyJavaClassifierType@20['RuntimeException'] {
    arguments = ArrayList@26[empty]
    classifier = JavaClassImpl@27['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@14['RuntimeException']
}

LazyJavaClassifierType@28['String'] {
    arguments = ArrayList@29[empty]
    classifier = JavaClassImpl@30['String']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@33['String'] {
    arguments = ArrayList@34[empty]
    classifier = JavaClassImpl@35['String']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@36['String'] {
    arguments = ArrayList@37[empty]
    classifier = JavaClassImpl@35['String']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@39['String'] {
    arguments = ArrayList@40[empty]
    classifier = JavaClassImpl@30['String']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@41['Throwable'] {
    arguments = ArrayList@42[empty]
    classifier = JavaClassImpl@43['Throwable']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@45['Throwable'] {
    arguments = ArrayList@46[empty]
    classifier = JavaClassImpl@47['Throwable']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@48['Throwable'] {
    arguments = ArrayList@49[empty]
    classifier = JavaClassImpl@43['Throwable']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@50['Throwable'] {
    arguments = ArrayList@51[empty]
    classifier = JavaClassImpl@47['Throwable']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@17['Throwable'] {
    arguments = ArrayList@52[empty]
    classifier = JavaClassImpl@53['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaPackageFragmentProvider@54 {
    packageFragments('<root>': FqName@55) = LazyJavaPackageFragment@56['<root>']
    packageFragments('Any': FqName@57) = null
    packageFragments('Int': FqName@58) = null
    packageFragments('Number': FqName@59) = null
    packageFragments('String': FqName@60) = null
    packageFragments('java': FqName@61) = LazyJavaPackageFragment@62['java']
    packageFragments('java.lang': FqName@63) = LazyJavaPackageFragment@64['lang']
    packageFragments('java.lang.Any': FqName@65) = null
    packageFragments('java.lang.Int': FqName@66) = null
    packageFragments('java.lang.Number': FqName@67) = null
    packageFragments('java.lang.String': FqName@68) = null
    packageFragments('java.lang.tailRecursive': FqName@69) = null
    packageFragments('kotlin': FqName@70) = null
    packageFragments('kotlin.Any': FqName@71) = null
    packageFragments('kotlin.Int': FqName@72) = null
    packageFragments('kotlin.Number': FqName@73) = null
    packageFragments('kotlin.String': FqName@74) = null
    packageFragments('kotlin.io': FqName@75) = null
    packageFragments('kotlin.jvm': FqName@76) = null
    packageFragments('kotlin.tailRecursive': FqName@77) = null
    packageFragments('tailRecursive': FqName@78) = null
    topLevelClasses(JavaClassImpl@25['Exception']) = LazyJavaClassDescriptor@3['Exception']
    topLevelClasses(JavaClassImpl@79['IllegalStateException']) = LazyJavaClassDescriptor@5['IllegalStateException']
    topLevelClasses(JavaClassImpl@27['RuntimeException']) = LazyJavaClassDescriptor@13['RuntimeException']
}

LazyJavaPackageFragment@56['<root>'] {
    classes('Any': Name@80) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('IllegalStateException': Name@82) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('Int': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('Number': Name@84) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('String': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('tailRecursive': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('withWhen': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@81
    deserializedPackageScope = Empty@88 // through LazyPackageFragmentScopeForJavaPackage@81
    functions('IllegalStateException': Name@82) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@81
    functions('withWhen': Name@87) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@81
    memberIndex = computeMemberIndex$1@90 // through LazyPackageFragmentScopeForJavaPackage@81
}

LazyJavaPackageFragment@62['java'] {
    classes('lang': Name@91) = null // through LazyPackageFragmentScopeForJavaPackage@92
    deserializedPackageScope = Empty@88 // through LazyPackageFragmentScopeForJavaPackage@92
    functions('lang': Name@93) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@92
    memberIndex = computeMemberIndex$1@94 // through LazyPackageFragmentScopeForJavaPackage@92
}

LazyJavaPackageFragment@64['lang'] {
    classes('IllegalStateException': Name@82) = LazyJavaClassDescriptor@5['IllegalStateException'] // through LazyPackageFragmentScopeForJavaPackage@95
    classes('withWhen': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@95
    deserializedPackageScope = Empty@88 // through LazyPackageFragmentScopeForJavaPackage@95
    functions('IllegalStateException': Name@82) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('withWhen': Name@87) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    memberIndex = computeMemberIndex$1@96 // through LazyPackageFragmentScopeForJavaPackage@95
}

ResolutionTaskHolder@97 {
    <name not found> = ArrayList@98[1] { ResolutionCandidate@99 }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@100 {
    <name not found> = ArrayList@101[1] { ResolutionCandidate@102 }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@103 {
    <name not found> = ArrayList@104[1] { ResolutionCandidate@105 }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@106 {
    <name not found> = ArrayList@107[1] { ResolutionCandidate@108 }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@109 {
    <name not found> = ArrayList@110[1] { ResolutionCandidate@111 }
}

ResolutionTaskHolder@112 {
    <name not found> = ArrayList@113[1] { ResolutionCandidate@114 }
}

ResolutionTaskHolder@115 {
    <name not found> = ArrayList@116[1] { ResolutionCandidate@117 }
}

ResolutionTaskHolder@118 {
    <name not found> = ArrayList@119[1] { ResolutionCandidate@120 }
}

ResolutionTaskHolder@121 {
    <name not found> = ArrayList@122[1] { ResolutionCandidate@123 }
}

ResolutionTaskHolder@124 {
    <name not found> = ArrayList@125[1] { ResolutionCandidate@126 }
}

ResolutionTaskHolder@127 {
    <name not found> = ArrayList@128[1] { ResolutionCandidate@129 }
}

ResolutionTaskHolder@130 {
    <name not found> = ArrayList@131[1] { ResolutionCandidate@132 }
}

ResolutionTaskHolder@133 {
    <name not found> = ArrayList@134[1] { ResolutionCandidate@135 }
}

ResolutionTaskHolder@136 {
    <name not found> = ArrayList@137[1] { ResolutionCandidate@138 }
}

ResolutionTaskHolder@139 {
    <name not found> = ArrayList@140[1] { ResolutionCandidate@141 }
}

ResolutionTaskHolder@142 {
    <name not found> = ArrayList@143[1] { ResolutionCandidate@144 }
}

ResolutionTaskHolder@145 {
    <name not found> = ArrayList@146[1] { ResolutionCandidate@147 }
}

ResolutionTaskHolder@148 {
    <name not found> = ArrayList@149[4] { ResolutionCandidate@150, ResolutionCandidate@151, ResolutionCandidate@152, ... }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@153 {
    <name not found> = ArrayList@154[8] { ResolutionCandidate@155, ResolutionCandidate@156, ResolutionCandidate@157, ... }
}

ResolutionTaskHolder@158 {
    <name not found> = ArrayList@159[8] { ResolutionCandidate@160, ResolutionCandidate@161, ResolutionCandidate@162, ... }
}

null {
    <name not found> = ArrayList@163[1] { ResolutionCandidate@138 }
    <name not found> = ArrayList@164[1] { ResolutionCandidate@147 }
    <name not found> = ArrayList@165[1] { ResolutionCandidate@120 }
    <name not found> = ArrayList@166[1] { ResolutionCandidate@144 }
    <name not found> = ArrayList@167[1] { ResolutionCandidate@141 }
    <name not found> = ArrayList@168[1] { ResolutionCandidate@123 }
    <name not found> = ArrayList@169[1] { ResolutionCandidate@105 }
    <name not found> = ArrayList@170[1] { ResolutionCandidate@132 }
    <name not found> = ArrayList@171[1] { ResolutionCandidate@111 }
    <name not found> = ArrayList@172[1] { ResolutionCandidate@99 }
    <name not found> = ArrayList@173[1] { ResolutionCandidate@117 }
    <name not found> = ArrayList@174[1] { ResolutionCandidate@108 }
    <name not found> = ArrayList@175[1] { ResolutionCandidate@135 }
    <name not found> = ArrayList@176[1] { ResolutionCandidate@129 }
    <name not found> = ArrayList@177[1] { ResolutionCandidate@102 }
    <name not found> = ArrayList@178[1] { ResolutionCandidate@126 }
    <name not found> = ArrayList@179[1] { ResolutionCandidate@114 }
    <name not found> = ArrayList@180[4] { ResolutionCandidate@150, ResolutionCandidate@151, ResolutionCandidate@152, ... }
    <name not found> = ArrayList@181[8] { ResolutionCandidate@155, ResolutionCandidate@156, ResolutionCandidate@157, ... }
    <name not found> = ArrayList@182[8] { ResolutionCandidate@160, ResolutionCandidate@161, ResolutionCandidate@162, ... }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}
