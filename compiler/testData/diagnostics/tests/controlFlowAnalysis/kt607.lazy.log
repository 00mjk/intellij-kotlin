ClosureExpressionsTypingVisitor$1@0 {
    <name not found> = JetTypeImpl@1['<no name provided>']
}

LazyJavaPackageFragmentProvider@2 {
    packageFragments('<root>': FqName@3) = LazyJavaPackageFragment@4['<root>']
    packageFragments('A': FqName@5) = null
    packageFragments('Int': FqName@6) = null
    packageFragments('java': FqName@7) = LazyJavaPackageFragment@8['java']
    packageFragments('java.lang': FqName@9) = LazyJavaPackageFragment@10['lang']
    packageFragments('java.lang.A': FqName@11) = null
    packageFragments('java.lang.Int': FqName@12) = null
    packageFragments('kotlin': FqName@13) = null
    packageFragments('kotlin.A': FqName@14) = null
    packageFragments('kotlin.Int': FqName@15) = null
    packageFragments('kotlin.io': FqName@16) = null
    packageFragments('kotlin.jvm': FqName@17) = null
    packageFragments('kt607': FqName@18) = null
    packageFragments('kt607.A': FqName@19) = null
    packageFragments('kt607.Int': FqName@20) = null
}

LazyJavaPackageFragment@8['java'] {
    classes('lang': Name@21) = null // through LazyPackageFragmentScopeForJavaPackage@22
    deserializedPackageScope = Empty@23 // through LazyPackageFragmentScopeForJavaPackage@22
    functions('lang': Name@24) = EmptyList@25[empty] // through LazyPackageFragmentScopeForJavaPackage@22
    memberIndex = computeMemberIndex$1@26 // through LazyPackageFragmentScopeForJavaPackage@22
}

ResolutionTaskHolder@27 {
    <name not found> = ArrayList@28[1] { ResolutionCandidate@29 }
}

ResolutionTaskHolder@30 {
    <name not found> = ArrayList@31[1] { ResolutionCandidate@32 }
}

ResolutionTaskHolder@33 {
    <name not found> = ArrayList@34[1] { ResolutionCandidate@35 }
}

ResolutionTaskHolder@36 {
    <name not found> = ArrayList@37[1] { ResolutionCandidate@38 }
}

null {
    <name not found> = ArrayList@39[1] { ResolutionCandidate@38 }
    <name not found> = ArrayList@40[1] { ResolutionCandidate@35 }
    <name not found> = ArrayList@41[1] { ResolutionCandidate@29 }
    <name not found> = ArrayList@42[1] { ResolutionCandidate@32 }
}
