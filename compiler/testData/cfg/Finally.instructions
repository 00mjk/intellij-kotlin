== t1 ==
fun t1() {
  try {
    1
  } finally {
    2
  }
}
---------------------
l0:
    <START>     NEXT:[jmp?(l2)]      PREV:[]
    jmp?(l2)    NEXT:[r(2), r(1)]    PREV:[<START>]
    r(1)        NEXT:[r(2)]          PREV:[jmp?(l2)]
l2:
    r(2)        NEXT:[<END>]         PREV:[jmp?(l2), r(1)]
l1:
    <END>       NEXT:[<SINK>]        PREV:[r(2)]
error:
    <ERROR>     NEXT:[]              PREV:[]
sink:
    <SINK>      NEXT:[]              PREV:[<END>]
=====================
== t2 ==
fun t2() {
  try {
    1
    if (2 > 3) {
      return
    }
  } finally {
    2
  }
}
---------------------
l0:
    <START>        NEXT:[jmp?(l2)]             PREV:[]
    jmp?(l2)       NEXT:[r(2), r(1)]           PREV:[<START>]
    r(1)           NEXT:[r(2)]                 PREV:[jmp?(l2)]
    r(2)           NEXT:[r(3)]                 PREV:[r(1)]
    r(3)           NEXT:[r(>)]                 PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]             PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l3)]               PREV:[r(>)]
    jf(l3)         NEXT:[read (Unit), r(2)]    PREV:[r(2 > 3)]
    r(2)           NEXT:[ret l1]               PREV:[jf(l3)]
    ret l1         NEXT:[<END>]                PREV:[r(2)]
*   jmp(l4)        NEXT:[r(2)]                 PREV:[]
l3:
    read (Unit)    NEXT:[r(2)]                 PREV:[jf(l3)]
l2:
l4:
    r(2)           NEXT:[<END>]                PREV:[jmp?(l2), read (Unit)]
l1:
    <END>          NEXT:[<SINK>]               PREV:[ret l1, r(2)]
error:
    <ERROR>        NEXT:[]                     PREV:[]
sink:
    <SINK>         NEXT:[]                     PREV:[<END>]
=====================
== anonymous_0 ==
{ () =>
        if (2 > 3) {
          return@
        }
    }
---------------------
l4:
    <START>        NEXT:[r(2)]                   PREV:[]
    r(2)           NEXT:[r(3)]                   PREV:[<START>]
    r(3)           NEXT:[r(>)]                   PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]               PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l6)]                 PREV:[r(>)]
    jf(l6)         NEXT:[read (Unit), ret l5]    PREV:[r(2 > 3)]
    ret l5         NEXT:[<END>]                  PREV:[jf(l6)]
*   jmp(l7)        NEXT:[<END>]                  PREV:[]
l6:
    read (Unit)    NEXT:[<END>]                  PREV:[jf(l6)]
l5:
l7:
    <END>          NEXT:[<SINK>]                 PREV:[ret l5, read (Unit)]
error:
    <ERROR>        NEXT:[]                       PREV:[]
sink:
    <SINK>         NEXT:[]                       PREV:[<END>]
=====================
== t3 ==
fun t3() {
  try {
    1
    @{ () =>
        if (2 > 3) {
          return@
        }
    }
  } finally {
    2
  }
}
---------------------
l0:
    <START>                 NEXT:[jmp?(l2)]                                                            PREV:[]
    jmp?(l2)                NEXT:[r(2), r(1)]                                                          PREV:[<START>]
    r(1)                    NEXT:[jmp?(l3)]                                                            PREV:[jmp?(l2)]
    jmp?(l3)                NEXT:[r({ () => if (2 > 3) { retur..), df({ () => if (2 > 3) { retu..)]    PREV:[r(1)]
    df({ () =>          
            if (2 > 3) {
              return@   
            }           
        })                  NEXT:[<SINK>]                                                              PREV:[jmp?(l3)]
l3:
    r({ () =>           
            if (2 > 3) {
              return@   
            }           
        })                  NEXT:[r(2)]                                                                PREV:[jmp?(l3)]
l2:
    r(2)                    NEXT:[<END>]                                                               PREV:[jmp?(l2), r({ () => if (2 > 3) { retur..)]
l1:
    <END>                   NEXT:[<SINK>]                                                              PREV:[r(2)]
error:
    <ERROR>                 NEXT:[]                                                                    PREV:[]
sink:
    <SINK>                  NEXT:[]                                                                    PREV:[df({ () => if (2 > 3) { retu..), <END>]
l4:
    <START>        NEXT:[r(2)]                   PREV:[]
    r(2)           NEXT:[r(3)]                   PREV:[<START>]
    r(3)           NEXT:[r(>)]                   PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]               PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l6)]                 PREV:[r(>)]
    jf(l6)         NEXT:[read (Unit), ret l5]    PREV:[r(2 > 3)]
    ret l5         NEXT:[<END>]                  PREV:[jf(l6)]
*   jmp(l7)        NEXT:[<END>]                  PREV:[]
l6:
    read (Unit)    NEXT:[<END>]                  PREV:[jf(l6)]
l5:
l7:
    <END>          NEXT:[<SINK>]                 PREV:[ret l5, read (Unit)]
error:
    <ERROR>        NEXT:[]                       PREV:[]
sink:
    <SINK>         NEXT:[]                       PREV:[<END>]
=====================
== anonymous_1 ==
{ () =>
    try {
      1
      if (2 > 3) {
        return@
      }
    } finally {
      2
    }
  }
---------------------
l3:
    <START>        NEXT:[jmp?(l5)]             PREV:[]
    jmp?(l5)       NEXT:[r(2), r(1)]           PREV:[<START>]
    r(1)           NEXT:[r(2)]                 PREV:[jmp?(l5)]
    r(2)           NEXT:[r(3)]                 PREV:[r(1)]
    r(3)           NEXT:[r(>)]                 PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]             PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l6)]               PREV:[r(>)]
    jf(l6)         NEXT:[read (Unit), r(2)]    PREV:[r(2 > 3)]
    r(2)           NEXT:[ret l4]               PREV:[jf(l6)]
    ret l4         NEXT:[<END>]                PREV:[r(2)]
*   jmp(l7)        NEXT:[r(2)]                 PREV:[]
l6:
    read (Unit)    NEXT:[r(2)]                 PREV:[jf(l6)]
l5:
l7:
    r(2)           NEXT:[<END>]                PREV:[jmp?(l5), read (Unit)]
l4:
    <END>          NEXT:[<SINK>]               PREV:[ret l4, r(2)]
error:
    <ERROR>        NEXT:[]                     PREV:[]
sink:
    <SINK>         NEXT:[]                     PREV:[<END>]
=====================
== t4 ==
fun t4() {
  @{ () =>
    try {
      1
      if (2 > 3) {
        return@
      }
    } finally {
      2
    }
  }
}
---------------------
l0:
    <START>               NEXT:[jmp?(l2)]                                                            PREV:[]
    jmp?(l2)              NEXT:[r({ () => try { 1 if (2 > 3)..), df({ () => try { 1 if (2 > 3..)]    PREV:[<START>]
    df({ () =>        
        try {         
          1           
          if (2 > 3) {
            return@   
          }           
        } finally {   
          2           
        }             
      })                  NEXT:[<SINK>]                                                              PREV:[jmp?(l2)]
l2:
    r({ () =>         
        try {         
          1           
          if (2 > 3) {
            return@   
          }           
        } finally {   
          2           
        }             
      })                  NEXT:[<END>]                                                               PREV:[jmp?(l2)]
l1:
    <END>                 NEXT:[<SINK>]                                                              PREV:[r({ () => try { 1 if (2 > 3)..)]
error:
    <ERROR>               NEXT:[]                                                                    PREV:[]
sink:
    <SINK>                NEXT:[]                                                                    PREV:[df({ () => try { 1 if (2 > 3..), <END>]
l3:
    <START>        NEXT:[jmp?(l5)]             PREV:[]
    jmp?(l5)       NEXT:[r(2), r(1)]           PREV:[<START>]
    r(1)           NEXT:[r(2)]                 PREV:[jmp?(l5)]
    r(2)           NEXT:[r(3)]                 PREV:[r(1)]
    r(3)           NEXT:[r(>)]                 PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]             PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l6)]               PREV:[r(>)]
    jf(l6)         NEXT:[read (Unit), r(2)]    PREV:[r(2 > 3)]
    r(2)           NEXT:[ret l4]               PREV:[jf(l6)]
    ret l4         NEXT:[<END>]                PREV:[r(2)]
*   jmp(l7)        NEXT:[r(2)]                 PREV:[]
l6:
    read (Unit)    NEXT:[r(2)]                 PREV:[jf(l6)]
l5:
l7:
    r(2)           NEXT:[<END>]                PREV:[jmp?(l5), read (Unit)]
l4:
    <END>          NEXT:[<SINK>]               PREV:[ret l4, r(2)]
error:
    <ERROR>        NEXT:[]                     PREV:[]
sink:
    <SINK>         NEXT:[]                     PREV:[<END>]
=====================
== t5 ==
fun t5() {
  @ while(true) {
    try {
      1
      if (2 > 3) {
        break @
      }
    } finally {
      2
    }
  }
}
---------------------
l0:
    <START>        NEXT:[r(true)]                  PREV:[]
l2:
l5:
    r(true)        NEXT:[jf(l3)]                   PREV:[<START>, jmp(l2)]
    jf(l3)         NEXT:[read (Unit), jmp?(l6)]    PREV:[r(true)]
l4:
    jmp?(l6)       NEXT:[r(2), r(1)]               PREV:[jf(l3)]
    r(1)           NEXT:[r(2)]                     PREV:[jmp?(l6)]
    r(2)           NEXT:[r(3)]                     PREV:[r(1)]
    r(3)           NEXT:[r(>)]                     PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]                 PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l7)]                   PREV:[r(>)]
    jf(l7)         NEXT:[read (Unit), r(2)]        PREV:[r(2 > 3)]
    r(2)           NEXT:[jmp(l3)]                  PREV:[jf(l7)]
    jmp(l3)        NEXT:[read (Unit)]              PREV:[r(2)]
*   jmp(l8)        NEXT:[r(2)]                     PREV:[]
l7:
    read (Unit)    NEXT:[r(2)]                     PREV:[jf(l7)]
l6:
l8:
    r(2)           NEXT:[jmp(l2)]                  PREV:[jmp?(l6), read (Unit)]
    jmp(l2)        NEXT:[r(true)]                  PREV:[r(2)]
l3:
    read (Unit)    NEXT:[<END>]                    PREV:[jf(l3), jmp(l3)]
l1:
    <END>          NEXT:[<SINK>]                   PREV:[read (Unit)]
error:
    <ERROR>        NEXT:[]                         PREV:[]
sink:
    <SINK>         NEXT:[]                         PREV:[<END>]
=====================
== t6 ==
fun t6() {
  try {
    @ while(true) {
        1
        if (2 > 3) {
          break @
        }
      }
      5
  } finally {
    2
  }
}
---------------------
l0:
    <START>        NEXT:[jmp?(l2)]                PREV:[]
    jmp?(l2)       NEXT:[r(2), r(true)]           PREV:[<START>]
l3:
l6:
    r(true)        NEXT:[jf(l4)]                  PREV:[jmp?(l2), jmp(l3)]
    jf(l4)         NEXT:[read (Unit), r(1)]       PREV:[r(true)]
l5:
    r(1)           NEXT:[r(2)]                    PREV:[jf(l4)]
    r(2)           NEXT:[r(3)]                    PREV:[r(1)]
    r(3)           NEXT:[r(>)]                    PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]                PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l7)]                  PREV:[r(>)]
    jf(l7)         NEXT:[read (Unit), jmp(l4)]    PREV:[r(2 > 3)]
    jmp(l4)        NEXT:[read (Unit)]             PREV:[jf(l7)]
*   jmp(l8)        NEXT:[jmp(l3)]                 PREV:[]
l7:
    read (Unit)    NEXT:[jmp(l3)]                 PREV:[jf(l7)]
l8:
    jmp(l3)        NEXT:[r(true)]                 PREV:[read (Unit)]
l4:
    read (Unit)    NEXT:[r(5)]                    PREV:[jf(l4), jmp(l4)]
    r(5)           NEXT:[r(2)]                    PREV:[read (Unit)]
l2:
    r(2)           NEXT:[<END>]                   PREV:[jmp?(l2), r(5)]
l1:
    <END>          NEXT:[<SINK>]                  PREV:[r(2)]
error:
    <ERROR>        NEXT:[]                        PREV:[]
sink:
    <SINK>         NEXT:[]                        PREV:[<END>]
=====================
== t7 ==
fun t7() {
  try {
    @ while(true) {
        1
        if (2 > 3) {
          break @
        }
      }
  } finally {
    2
  }
}
---------------------
l0:
    <START>        NEXT:[jmp?(l2)]                PREV:[]
    jmp?(l2)       NEXT:[r(2), r(true)]           PREV:[<START>]
l3:
l6:
    r(true)        NEXT:[jf(l4)]                  PREV:[jmp?(l2), jmp(l3)]
    jf(l4)         NEXT:[read (Unit), r(1)]       PREV:[r(true)]
l5:
    r(1)           NEXT:[r(2)]                    PREV:[jf(l4)]
    r(2)           NEXT:[r(3)]                    PREV:[r(1)]
    r(3)           NEXT:[r(>)]                    PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]                PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l7)]                  PREV:[r(>)]
    jf(l7)         NEXT:[read (Unit), jmp(l4)]    PREV:[r(2 > 3)]
    jmp(l4)        NEXT:[read (Unit)]             PREV:[jf(l7)]
*   jmp(l8)        NEXT:[jmp(l3)]                 PREV:[]
l7:
    read (Unit)    NEXT:[jmp(l3)]                 PREV:[jf(l7)]
l8:
    jmp(l3)        NEXT:[r(true)]                 PREV:[read (Unit)]
l4:
    read (Unit)    NEXT:[r(2)]                    PREV:[jf(l4), jmp(l4)]
l2:
    r(2)           NEXT:[<END>]                   PREV:[jmp?(l2), read (Unit)]
l1:
    <END>          NEXT:[<SINK>]                  PREV:[r(2)]
error:
    <ERROR>        NEXT:[]                        PREV:[]
sink:
    <SINK>         NEXT:[]                        PREV:[<END>]
=====================
== t8 ==
fun t8(a : Int) {
  @ for (i in 1..a) {
    try {
      1
      if (2 > 3) {
        continue @
      }
    } finally {
      2
    }
  }
}
---------------------
l0:
    <START>        NEXT:[r(1)]                     PREV:[]
    r(1)           NEXT:[r(a)]                     PREV:[<START>]
    r(a)           NEXT:[r(..)]                    PREV:[r(1)]
    r(..)          NEXT:[r(1..a)]                  PREV:[r(a)]
    r(1..a)        NEXT:[w(i)]                     PREV:[r(..)]
    w(i)           NEXT:[jmp?(l2)]                 PREV:[r(1..a)]
l3:
    jmp?(l2)       NEXT:[read (Unit), jmp?(l6)]    PREV:[w(i)]
l4:
l5:
    jmp?(l6)       NEXT:[r(2), r(1)]               PREV:[jmp?(l2), jmp(l4), jmp?(l4)]
    r(1)           NEXT:[r(2)]                     PREV:[jmp?(l6)]
    r(2)           NEXT:[r(3)]                     PREV:[r(1)]
    r(3)           NEXT:[r(>)]                     PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]                 PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l7)]                   PREV:[r(>)]
    jf(l7)         NEXT:[read (Unit), r(2)]        PREV:[r(2 > 3)]
    r(2)           NEXT:[jmp(l4)]                  PREV:[jf(l7)]
    jmp(l4)        NEXT:[jmp?(l6)]                 PREV:[r(2)]
*   jmp(l8)        NEXT:[r(2)]                     PREV:[]
l7:
    read (Unit)    NEXT:[r(2)]                     PREV:[jf(l7)]
l6:
l8:
    r(2)           NEXT:[jmp?(l4)]                 PREV:[jmp?(l6), read (Unit)]
    jmp?(l4)       NEXT:[jmp?(l6), read (Unit)]    PREV:[r(2)]
l2:
    read (Unit)    NEXT:[<END>]                    PREV:[jmp?(l2), jmp?(l4)]
l1:
    <END>          NEXT:[<SINK>]                   PREV:[read (Unit)]
error:
    <ERROR>        NEXT:[]                         PREV:[]
sink:
    <SINK>         NEXT:[]                         PREV:[<END>]
=====================
== t9 ==
fun t9(a : Int) {
  try {
    @ for (i in 1..a) {
        1
        if (2 > 3) {
          continue @
        }
      }
      5
  } finally {
    2
  }
}
---------------------
l0:
    <START>        NEXT:[jmp?(l2)]                PREV:[]
    jmp?(l2)       NEXT:[r(2), r(1)]              PREV:[<START>]
    r(1)           NEXT:[r(a)]                    PREV:[jmp?(l2)]
    r(a)           NEXT:[r(..)]                   PREV:[r(1)]
    r(..)          NEXT:[r(1..a)]                 PREV:[r(a)]
    r(1..a)        NEXT:[w(i)]                    PREV:[r(..)]
    w(i)           NEXT:[jmp?(l3)]                PREV:[r(1..a)]
l4:
    jmp?(l3)       NEXT:[read (Unit), r(1)]       PREV:[w(i)]
l5:
l6:
    r(1)           NEXT:[r(2)]                    PREV:[jmp?(l3), jmp(l5), jmp?(l5)]
    r(2)           NEXT:[r(3)]                    PREV:[r(1)]
    r(3)           NEXT:[r(>)]                    PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]                PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l7)]                  PREV:[r(>)]
    jf(l7)         NEXT:[read (Unit), jmp(l5)]    PREV:[r(2 > 3)]
    jmp(l5)        NEXT:[r(1)]                    PREV:[jf(l7)]
*   jmp(l8)        NEXT:[jmp?(l5)]                PREV:[]
l7:
    read (Unit)    NEXT:[jmp?(l5)]                PREV:[jf(l7)]
l8:
    jmp?(l5)       NEXT:[r(1), read (Unit)]       PREV:[read (Unit)]
l3:
    read (Unit)    NEXT:[r(5)]                    PREV:[jmp?(l3), jmp?(l5)]
    r(5)           NEXT:[r(2)]                    PREV:[read (Unit)]
l2:
    r(2)           NEXT:[<END>]                   PREV:[jmp?(l2), r(5)]
l1:
    <END>          NEXT:[<SINK>]                  PREV:[r(2)]
error:
    <ERROR>        NEXT:[]                        PREV:[]
sink:
    <SINK>         NEXT:[]                        PREV:[<END>]
=====================
== t10 ==
fun t10(a : Int) {
  try {
    @ for (i in 1..a) {
        1
        if (2 > 3) {
          continue @
        }
      }
  } finally {
    2
  }
}
---------------------
l0:
    <START>        NEXT:[jmp?(l2)]                PREV:[]
    jmp?(l2)       NEXT:[r(2), r(1)]              PREV:[<START>]
    r(1)           NEXT:[r(a)]                    PREV:[jmp?(l2)]
    r(a)           NEXT:[r(..)]                   PREV:[r(1)]
    r(..)          NEXT:[r(1..a)]                 PREV:[r(a)]
    r(1..a)        NEXT:[w(i)]                    PREV:[r(..)]
    w(i)           NEXT:[jmp?(l3)]                PREV:[r(1..a)]
l4:
    jmp?(l3)       NEXT:[read (Unit), r(1)]       PREV:[w(i)]
l5:
l6:
    r(1)           NEXT:[r(2)]                    PREV:[jmp?(l3), jmp(l5), jmp?(l5)]
    r(2)           NEXT:[r(3)]                    PREV:[r(1)]
    r(3)           NEXT:[r(>)]                    PREV:[r(2)]
    r(>)           NEXT:[r(2 > 3)]                PREV:[r(3)]
    r(2 > 3)       NEXT:[jf(l7)]                  PREV:[r(>)]
    jf(l7)         NEXT:[read (Unit), jmp(l5)]    PREV:[r(2 > 3)]
    jmp(l5)        NEXT:[r(1)]                    PREV:[jf(l7)]
*   jmp(l8)        NEXT:[jmp?(l5)]                PREV:[]
l7:
    read (Unit)    NEXT:[jmp?(l5)]                PREV:[jf(l7)]
l8:
    jmp?(l5)       NEXT:[r(1), read (Unit)]       PREV:[read (Unit)]
l3:
    read (Unit)    NEXT:[r(2)]                    PREV:[jmp?(l3), jmp?(l5)]
l2:
    r(2)           NEXT:[<END>]                   PREV:[jmp?(l2), read (Unit)]
l1:
    <END>          NEXT:[<SINK>]                  PREV:[r(2)]
error:
    <ERROR>        NEXT:[]                        PREV:[]
sink:
    <SINK>         NEXT:[]                        PREV:[<END>]
=====================
== t11 ==
fun t11() {
  try {
    return 1
  }
  finally {
    return 2
  }
}
---------------------
l0:
    <START>      NEXT:[jmp?(l2)]      PREV:[]
    jmp?(l2)     NEXT:[r(2), r(1)]    PREV:[<START>]
    r(1)         NEXT:[r(2)]          PREV:[jmp?(l2)]
    r(2)         NEXT:[ret(*) l1]     PREV:[r(1)]
    ret(*) l1    NEXT:[<END>]         PREV:[r(2)]
*   ret(*) l1    NEXT:[<END>]         PREV:[]
l2:
    r(2)         NEXT:[ret(*) l1]     PREV:[jmp?(l2)]
    ret(*) l1    NEXT:[<END>]         PREV:[r(2)]
l1:
    <END>        NEXT:[<SINK>]        PREV:[ret(*) l1, ret(*) l1]
error:
    <ERROR>      NEXT:[]              PREV:[]
sink:
    <SINK>       NEXT:[]              PREV:[<END>]
=====================
