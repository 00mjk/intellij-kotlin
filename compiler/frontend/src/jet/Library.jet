package jet

annotation class volatile
annotation class atomic

fun <R> synchronized(lock: Any, block : () -> R) : R

fun Any?.identityEquals(other : Any?) : Boolean // = this === other

// Can't write a body due to a bootstrapping problem (see JET-74)
fun Any?.equals(other : Any?) : Boolean// = this === other

// Returns "null" for null
fun Any?.toString() : String// = this === other

fun <T : Any> T?.sure() : T

fun String?.plus(other: Any?) : String

trait Comparable<in T> {
  fun compareTo(other : T) : Int
}

trait Hashable {
  fun hashCode() : Int
  fun equals(other : Any?) : Boolean
}

class Boolean : Comparable<Boolean> {
  fun not() : Boolean

  fun and(other : Boolean) : Boolean

  fun or(other : Boolean) : Boolean

  fun xor(other : Boolean) : Boolean

  fun equals(other : Any?) : Boolean

  override fun compareTo(that : Boolean) : Int
}

trait CharSequence {
  fun get(index : Int) : Char

  val length : Int

  fun toString() : String
}

class String() : Comparable<String>, CharSequence {
  fun plus(other : Any?) : String

  fun equals(other : Any?) : Boolean

  override fun compareTo(that : String) : Int
  override fun get(index : Int) : Char
  override fun toString() : String
  override val length: Int
}

open class Throwable(message : String? = null, cause: Throwable? = null) {
    fun getMessage() : String?
    fun getCause() : Throwable?
    fun printStackTrace() : Unit
}
