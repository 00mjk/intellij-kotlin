package jet

public trait Range<in T : Comparable<T>> {
    public val start: T
    public val end: T
    public fun contains(item : T) : Boolean
}

public class IntRange(public override val start : Int, public override val end : Int) : Range<Int>, IntIterable {
    public override fun iterator () : IntIterator

    public override fun contains (elem: Int) : Boolean

    public class object {
        public val EMPTY: IntRange
    }
}

public class LongRange(public override val start : Long, public override val end : Long) : Range<Long>, LongIterable {
    public override fun iterator () : LongIterator

    public override fun contains (elem: Long) : Boolean

    public class object {
        public val EMPTY: LongRange
    }
}

public class ByteRange(public override val start : Byte, public override val end : Byte) : Range<Byte>, ByteIterable {
    public override fun iterator () : ByteIterator

    public override fun contains (elem: Byte) : Boolean

    public class object {
        public val EMPTY: ByteRange
    }
}

public class ShortRange(public override val start : Short, public override val end : Short) : Range<Short>, ShortIterable {
    public override fun iterator () : ShortIterator

    public override fun contains (elem: Short) : Boolean

    public class object {
        public val EMPTY: ShortRange
    }
}

public class CharRange(public override val start : Char, public override val end : Char) : Range<Char>, CharIterable {
    public override fun iterator () : CharIterator

    public override fun contains (elem: Char) : Boolean

    public class object {
        public val EMPTY: CharRange
    }
}

public class FloatRange(public override val start : Float, public override val end : Float) : Range<Float>, FloatIterable {
    public override fun iterator () : FloatIterator

    public override fun contains (elem: Float) : Boolean

    public class object {
        public val EMPTY: FloatRange
    }
}

public class DoubleRange(public override val start : Double, public override val end : Double) : Range<Double>, DoubleIterable {
    public override fun iterator () : DoubleIterator

    public override fun contains (elem: Double) : Boolean

    public class object {
        public val EMPTY: DoubleRange
    }
}


public trait NumberSequence<N: Number>: Iterable<N> {
    public val start: N
    public val end: N
    public val increment: Number
}

public class IntSequence(
    public override val start: Int,
    public override val end: Int,
    public override val increment: Int
): NumberSequence<Int> {

    override fun iterator(): IntIterator
}

public class LongSequence(
    public override val start: Long,
    public override val end: Long,
    public override val increment: Long
): NumberSequence<Long> {

    override fun iterator(): LongIterator
}

public class ByteSequence(
    public override val start: Byte,
    public override val end: Byte,
    public override val increment: Int
): NumberSequence<Byte> {

    override fun iterator(): ByteIterator
}

public class ShortSequence(
    public override val start: Short,
    public override val end: Short,
    public override val increment: Int
): NumberSequence<Short> {

    override fun iterator(): ShortIterator
}

public class CharacterSequence(
    public override val start: Char,
    public override val end: Char,
    public override val increment: Int
): NumberSequence<Char> {

    override fun iterator(): CharIterator
}

public class FloatSequence(
    public override val start: Float,
    public override val end: Float,
    public override val increment: Float
): NumberSequence<Float> {

    override fun iterator(): FloatIterator
}

public class DoubleSequence(
    public override val start: Double,
    public override val end: Double,
    public override val increment: Double
): NumberSequence<Double> {

    override fun iterator(): DoubleIterator
}
