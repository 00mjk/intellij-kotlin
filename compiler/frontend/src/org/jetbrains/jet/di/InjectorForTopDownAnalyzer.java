/*
 * Copyright 2000-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.jetbrains.jet.di;

import com.intellij.openapi.project.Project;
import org.jetbrains.jet.lang.ModuleConfiguration;
import org.jetbrains.jet.lang.cfg.pseudocode.JetControlFlowDataTraceFactory;
import org.jetbrains.jet.lang.resolve.*;
import org.jetbrains.jet.lang.resolve.calls.CallResolver;
import org.jetbrains.jet.lang.resolve.calls.OverloadingConflictResolver;
import org.jetbrains.jet.lang.types.expressions.ExpressionTypingServices;

/* This file is generated by org.jetbrains.jet.di.InjectorGenerator. DO NOT EDIT! */
public class InjectorForTopDownAnalyzer {

    private TopDownAnalyzer topDownAnalyzer;
    private BodyResolver bodyResolver;
    private ControlFlowAnalyzer controlFlowAnalyzer;
    private DeclarationsChecker declarationsChecker;
    private DescriptorResolver descriptorResolver;
    private ExpressionTypingServices expressionTypingServices;
    private final Project project;

    public InjectorForTopDownAnalyzer(
        Project project,
        TopDownAnalysisContext topDownAnalysisContext,
        ModuleConfiguration moduleConfiguration,
        JetControlFlowDataTraceFactory jetControlFlowDataTraceFactory,
        boolean analyzingBootstrapLibrary
    ) {
        this.topDownAnalyzer = new TopDownAnalyzer();
        this.bodyResolver = new BodyResolver();
        this.controlFlowAnalyzer = new ControlFlowAnalyzer();
        this.declarationsChecker = new DeclarationsChecker();
        this.descriptorResolver = new DescriptorResolver();
        this.expressionTypingServices = new ExpressionTypingServices();
        this.project = project;
        DeclarationResolver declarationResolver = new DeclarationResolver();
        AnnotationResolver annotationResolver = new AnnotationResolver();
        CallResolver callResolver = new CallResolver();
        TypeResolver typeResolver = new TypeResolver();
        OverloadingConflictResolver overloadingConflictResolver = new OverloadingConflictResolver();
        ImportsResolver importsResolver = new ImportsResolver();
        TypeHierarchyResolver typeHierarchyResolver = new TypeHierarchyResolver();
        DelegationResolver delegationResolver = new DelegationResolver();
        OverrideResolver overrideResolver = new OverrideResolver();
        OverloadResolver overloadResolver = new OverloadResolver();

        this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
        this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
        this.topDownAnalyzer.setDelegationResolver(delegationResolver);
        this.topDownAnalyzer.setOverrideResolver(overrideResolver);
        this.topDownAnalyzer.setOverloadResolver(overloadResolver);

        this.bodyResolver.setContext(topDownAnalysisContext);
        this.bodyResolver.setDescriptorResolver(descriptorResolver);
        this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
        this.bodyResolver.setCallResolver(callResolver);

        this.controlFlowAnalyzer.setContext(topDownAnalysisContext);
        this.controlFlowAnalyzer.setFlowDataTraceFactory(jetControlFlowDataTraceFactory);

        this.declarationsChecker.setContext(topDownAnalysisContext);

        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
        this.descriptorResolver.setTypeResolver(typeResolver);
        this.descriptorResolver.setAnnotationResolver(annotationResolver);

        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
        this.expressionTypingServices.setCallResolver(callResolver);
        this.expressionTypingServices.setTypeResolver(typeResolver);
        this.expressionTypingServices.setProject(project);

        declarationResolver.setContext(topDownAnalysisContext);
        declarationResolver.setDescriptorResolver(descriptorResolver);
        declarationResolver.setAnnotationResolver(annotationResolver);
        declarationResolver.setImportsResolver(importsResolver);

        annotationResolver.setExpressionTypingServices(expressionTypingServices);
        annotationResolver.setCallResolver(callResolver);

        callResolver.setDescriptorResolver(descriptorResolver);
        callResolver.setExpressionTypingServices(expressionTypingServices);
        callResolver.setTypeResolver(typeResolver);
        callResolver.setOverloadingConflictResolver(overloadingConflictResolver);

        typeResolver.setDescriptorResolver(descriptorResolver);
        typeResolver.setAnnotationResolver(annotationResolver);

        importsResolver.setContext(topDownAnalysisContext);
        importsResolver.setConfiguration(moduleConfiguration);

        typeHierarchyResolver.setContext(topDownAnalysisContext);
        typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
        typeHierarchyResolver.setImportsResolver(importsResolver);
        typeHierarchyResolver.setConfiguration(moduleConfiguration);

        delegationResolver.setContext(topDownAnalysisContext);

        overrideResolver.setContext(topDownAnalysisContext);

        overloadResolver.setContext(topDownAnalysisContext);

    }

    public TopDownAnalyzer getTopDownAnalyzer() {
        return this.topDownAnalyzer;
    }

    public BodyResolver getBodyResolver() {
        return this.bodyResolver;
    }

    public ControlFlowAnalyzer getControlFlowAnalyzer() {
        return this.controlFlowAnalyzer;
    }

    public DeclarationsChecker getDeclarationsChecker() {
        return this.declarationsChecker;
    }

    public DescriptorResolver getDescriptorResolver() {
        return this.descriptorResolver;
    }

    public ExpressionTypingServices getExpressionTypingServices() {
        return this.expressionTypingServices;
    }

    public Project getProject() {
        return this.project;
    }

}
